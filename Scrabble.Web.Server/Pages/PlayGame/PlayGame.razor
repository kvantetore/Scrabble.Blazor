@page "/game/{ParameterId}"
@attribute [Authorize]

<h1>Scrabble</h1>

@if (@Game != null)
{
    <div class="game-area">
        <div class="game-area--board">
            <div class="board" tabindex="0" @onkeydown="@OnKeyDown" @onkeypress="@OnKeyPress">
                @for (var i = 0; i < Tiles.GetLength(0); i++) 
                {
                    <div class="board--row">
                        @for (var j = 0; j < Tiles.GetLength(1); j++)
                        {
                            var (k, l) = (i, j);
                            var tile = Tiles[k, l];

                            <div class="board--cell @GetTileTypeCssClass(tile.TileType) @GetSelectedCssClass(k, l)" @onclick="@(() => OnTileClick(k, l))">
                                @if (IsFilled(tile)) {
                                    <div class="tile @GetLetterScoredCssClass(tile)">
                                        @(tile.CurrentLetter?.ToUpper())                            
                                    </div>
                                }                    
                            </div>
                        }
                    </div>
                }
            </div>
        </div>

        <div class="game-area--action">
            @if (!IsGameEnded) {
                <div>
                    Next player: @(GetNextPlayer()?.Name)
                </div>
                <div>
                    Score: @GetCurrentScore()
                </div>

                <div>
                    Words:
                    <ul>
                        @foreach (var word in GetCurrentWords())
                        {
                            <li>@(string.Join("", word.Select(t => t.CurrentLetter)))</li>
                        }
                    </ul>

                </div>

                <div>
                    @foreach (var player in Players)
                    {
                        <button type="button" class="btn @(player == GetNextPlayer() ? "btn-primary" : "btn-secondary")" @onclick="@(() => ScoreTiles(player))">Score for @player.Name</button>
                    }

                    <button type="button" class="btn btn-danger" @onclick="@(() => Undo())" disabled="@(!CanUndo())">Undo</button>
                </div>
            }

            <table class="table">
                <tr>
                    <td>Round</td>
                    @foreach (var player in Players)
                    {
                        <th class="text-center">@player.Name</th>
                    }
                </tr>
                <tr>
                    <td>Total</td>
                    @foreach (var player in Players)
                    {
                        <th class="text-center">@GetPlayerScore(player)</th>
                    }
                </tr>
                @foreach (var round in Game.Rounds.OrderBy(r => r.RoundNumber))
                {
                    <tr>
                        <td>@round.RoundNumber</td>
                        @foreach (var player in Players) 
                        {
                            var playerRound = round.PlayerRounds.FirstOrDefault(pr => pr.Player == player);
                            <td class="text-center">
                                <text>@(playerRound?.Score)</text>
                            </td>
                        }
                    </tr>
                }
            </table>
        </div>

        @if (!IsGameEnded)
        {
            <div class="game-area--end-game">
                <button type="button" class="btn btn-danger" @onclick="@(() => EndGame())">
                    End game
                </button>
            </div>
        }
    </div>
}

@code {
    protected string GetSelectedCssClass(int i, int j) {
        var (si, sj) = SelectedIndex;
        return (si == i && sj == j) ? "board--cell__selected" : "";
    }

    protected string GetTileTypeCssClass(TileType tileType) {
        return $"board--cell__{tileType:g}";
    }

    protected string GetLetterScoredCssClass(Tile tile) {
        return tile.Scored ? "tile-scored" : "";
    }
}