// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Scrabble.Data.Models;

namespace Scrabble.Web.Server.Migrations
{
    [DbContext(typeof(ScrabbleContext))]
    [Migration("20191201171503_RoundOrdering")]
    partial class RoundOrdering
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0-preview3.19554.8");

            modelBuilder.Entity("Scrabble.Data.Models.Game", b =>
                {
                    b.Property<Guid>("GameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Start")
                        .HasColumnType("TEXT");

                    b.HasKey("GameId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("Scrabble.Data.Models.GamePlayer", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.HasKey("GameId", "PlayerId");

                    b.HasIndex("PlayerId");

                    b.ToTable("GamePlayer");
                });

            modelBuilder.Entity("Scrabble.Data.Models.Player", b =>
                {
                    b.Property<Guid>("PlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("PlayerId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("Scrabble.Data.Models.PlayerRound", b =>
                {
                    b.Property<Guid>("RoundId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Score")
                        .HasColumnType("INTEGER");

                    b.HasKey("RoundId", "PlayerId");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerRound");
                });

            modelBuilder.Entity("Scrabble.Data.Models.PlayerRoundLetter", b =>
                {
                    b.Property<Guid>("PlayerRoundLetterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("ColIndex")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Letter")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PlayerRoundId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("PlayerRoundPlayerId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("PlayerRoundRoundId")
                        .HasColumnType("TEXT");

                    b.Property<int>("RowIndex")
                        .HasColumnType("INTEGER");

                    b.HasKey("PlayerRoundLetterId");

                    b.HasIndex("PlayerRoundRoundId", "PlayerRoundPlayerId");

                    b.ToTable("PlayerRoundLetter");
                });

            modelBuilder.Entity("Scrabble.Data.Models.Round", b =>
                {
                    b.Property<Guid>("RoundId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("GameId")
                        .HasColumnType("TEXT");

                    b.Property<int>("RoundNumber")
                        .HasColumnType("INTEGER");

                    b.HasKey("RoundId");

                    b.HasIndex("GameId");

                    b.ToTable("Round");
                });

            modelBuilder.Entity("Scrabble.Data.Models.GamePlayer", b =>
                {
                    b.HasOne("Scrabble.Data.Models.Game", "Game")
                        .WithMany("GamePlayers")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Scrabble.Data.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Scrabble.Data.Models.PlayerRound", b =>
                {
                    b.HasOne("Scrabble.Data.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Scrabble.Data.Models.Round", "Round")
                        .WithMany("PlayerRounds")
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Scrabble.Data.Models.PlayerRoundLetter", b =>
                {
                    b.HasOne("Scrabble.Data.Models.PlayerRound", "PlayerRound")
                        .WithMany("Letters")
                        .HasForeignKey("PlayerRoundRoundId", "PlayerRoundPlayerId");
                });

            modelBuilder.Entity("Scrabble.Data.Models.Round", b =>
                {
                    b.HasOne("Scrabble.Data.Models.Game", "Game")
                        .WithMany("Rounds")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
